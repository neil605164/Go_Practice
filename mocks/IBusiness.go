// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	structs "Go_Practice/app/global/structs"

	mock "github.com/stretchr/testify/mock"
)

// IBusiness is an autogenerated mock type for the IBusiness type
type IBusiness struct {
	mock.Mock
}

// Add provides a mock function with given fields: a, b
func (_m *IBusiness) Add(a int64, b int64) int64 {
	ret := _m.Called(a, b)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64, int64) int64); ok {
		r0 = rf(a, b)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Api provides a mock function with given fields: a, b
func (_m *IBusiness) Api(a int, b int) int {
	ret := _m.Called(a, b)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(a, b)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DeleteUserInfo provides a mock function with given fields: id
func (_m *IBusiness) DeleteUserInfo(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDBUserInfo provides a mock function with given fields:
func (_m *IBusiness) GetDBUserInfo() ([]structs.DBResp, error) {
	ret := _m.Called()

	var r0 []structs.DBResp
	if rf, ok := ret.Get(0).(func() []structs.DBResp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]structs.DBResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRedis provides a mock function with given fields: key
func (_m *IBusiness) GetRedis(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreDBInfo provides a mock function with given fields: req
func (_m *IBusiness) StoreDBInfo(req structs.RawData) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(structs.RawData) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserInfo provides a mock function with given fields: req
func (_m *IBusiness) UpdateUserInfo(req structs.RawData) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(structs.RawData) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
